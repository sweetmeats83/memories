# Multi-stage production image (CPU) with Tailwind build

# --- Stage 1: build Tailwind assets ---
FROM node:20-alpine AS assets
WORKDIR /app

# Install Tailwind deps first (leverages Docker cache)
COPY package.json package-lock.json* ./
RUN sh -lc 'if [ -f package-lock.json ]; then npm ci; else npm install; fi'

# Copy sources needed for Tailwind content scanning and CSS entry
COPY static/css/tailwind.src.css ./static/css/tailwind.src.css
COPY templates ./templates
COPY static/js ./static/js
COPY tailwind.config.js ./

# Build Tailwind CSS to static/css/tailwind.css
RUN npm run build:css


# --- Stage 2: Python app runtime (CPU-only) ---
FROM python:3.11-slim AS runtime

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PORT=8000 \
    TZ=Etc/UTC

WORKDIR /app

# System deps (ffmpeg for media handling)
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
      ffmpeg \
      tzdata \
    && rm -rf /var/lib/apt/lists/*

# Install Python deps
COPY requirements.txt ./
RUN if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

# Copy application code
COPY . /app

# Copy built Tailwind CSS from assets stage
COPY --from=assets /app/static/css/tailwind.css /app/static/css/tailwind.css

EXPOSE 8000

# Optional: non-root user (uncomment if your environment allows)
# RUN useradd -m -u 10001 appuser && chown -R appuser:appuser /app
# USER appuser

# Start app
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

