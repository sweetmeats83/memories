<!DOCTYPE html><html lang="en"><head>  <link rel="icon" type="image/png" href="{{ url_for('static', path='memories.png') }}">  <meta charset="utf-8"/>  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">  <title>{{ title if title else 'Memories' }}</title>  <!-- Tailwind CSS (dark mode via class) -->  <script>    window.tailwind = window.tailwind || {};    window.tailwind.config = { darkMode: 'class' };  </script>  <script src="https://cdn.tailwindcss.com"></script>  <!-- Fonts -->  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap" rel="stylesheet">  <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet">  <link href="https://fonts.googleapis.com/css2?family=Kenia&display=swap" rel="stylesheet">  <link href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:wght@400;700&display=swap" rel="stylesheet">  <link rel="stylesheet" href="https://cdn.plyr.io/3.7.8/plyr.css" />  <!-- Tagify -->  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@yaireo/tagify/dist/tagify.css">  <script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify"></script>  <style>       .pill {      display:inline-flex;      align-items:center;      gap:.4rem;      padding:.45rem .9rem;      border:1px solid rgba(87, 13, 13, 0.658);      border-radius:999px;      background:rgba(255, 186, 186, 0.411); /* smoked glass */      backdrop-filter: blur(6px);      -webkit-backdrop-filter: blur(6px);      color:#111;      font-weight:500;      transition:        background .25s ease,        color .25s ease,        box-shadow .25s ease,        transform .15s ease;    }    /* Hover: lift + glow */    .pill:hover {      background:rgba(255,255,255,0.85);      color:#000;      box-shadow:0 4px 14px rgba(0,0,0,0.22),                0 0 8px rgba(255,255,255,0.6);      transform:translateY(-1px);    }    /* Active click press */    .pill:active {      transform:translateY(1px);      box-shadow:1px 1px 0 rgba(0,0,0,0.65);    }    /* Selected / toggled state */    .pill.is-selected {      background:rgba(199, 7, 46, 0.445); /* crimson smoked */      border-color:rgba(220,20,60,0.6);      color:#000;      box-shadow:0 0 10px rgba(220,20,60,0.45);    }    .pill.is-selected:hover {      background:rgba(220,20,60,0.4);      color:#111;      box-shadow:0 6px 18px rgba(220,20,60,0.5);    }    /* Icon inside pill */    .pill .material-symbols-outlined,    .pill .material-icons-outlined {      font-size:18px;      line-height:1;    }        /* Plyr theming to match your site */    :root {      --plyr-color-main: #111;          /* accent (seek bar, active buttons) */      --plyr-video-background: #000;      --plyr-audio-controls-background: rgba(255,255,255,.82);      --plyr-audio-controls-border: 1px solid #000;    }    .player-card {      border: 1px solid #000;      border-radius: .75rem;      background: rgba(255,255,255,.65);      backdrop-filter: blur(6px);      box-shadow: 0 .5rem 1rem rgba(0,0,0,.06);      overflow: hidden;    }    /* Tighten plyr chrome a bit */    .plyr--video .plyr__controls,    .plyr--audio .plyr__controls {      padding: .5rem .6rem;    }    /* Outline aesthetic (keep) */    .tagify{ --tags-border-color:#000; --tag-bg:#fff; --tag-text-color:#000 }    .tagify{ border:1px solid #000; border-radius:.5rem }    .tagify__tag{ border:1px solid #000; background:#fff }    .tagify__tag:hover{ background:#000; color:#fff }    .tagify__dropdown{ border:1px solid #000; box-shadow:none }    :root {      --brand-serif: Baskerville, "Libre Baskerville", "Baskervville", "Times New Roman", serif;      --tap-min: 44px; /* recommended minimum touch size */    }    .font-baskerville { font-family: var(--brand-serif); }    /* Mobile comfort defaults */    @media (max-width: 640px){      /* Prevent iOS auto-zoom when inputs <16px */      input, select, textarea { font-size: 16px; }      /* Make any button-like control comfortably tappable */      .btn, button, [role="button"], .nav-link, .js-action {        min-height: var(--tap-min);        padding: .75rem 1rem;        font-size: 1rem;        line-height: 1.25rem;      }    }      body.token-view .article-toolbar {        display: none !important;      }  </style>  <!-- Site CSS -->  <link rel="stylesheet" href="{{ url_for('static', path='css/variables.css') }}?v=20250927">  <link rel="stylesheet" href="{{ url_for('static', path='css/base.css') }}?v=20250927">  <link rel="stylesheet" href="{{ url_for('static', path='css/components.css') }}?v=20250927">  <link rel="stylesheet" href="{{ url_for('static', path='css/utilities.css') }}?v=20250927">  <link rel="stylesheet" href="{{ url_for('static', path='css/site.css') }}?v=20250927">  <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined" rel="stylesheet">  <!-- Preload nav search JS to keep input crisp -->  <link rel="preload" as="script" href="{{ url_for('static', path='js/search-modal.js') }}">  <script>    // Theme bootstrap: read persisted preference and apply to <html>    (function(){      try {        const saved = localStorage.getItem('theme');        const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;        const theme = (saved === 'light' || saved === 'dark') ? saved : (prefersDark ? 'dark' : 'light');        const root = document.documentElement;        root.setAttribute('data-theme', theme);        if (theme === 'dark') root.classList.add('dark'); else root.classList.remove('dark');        window.setTheme = function(next){          const val = (next === 'dark') ? 'dark' : 'light';          root.setAttribute('data-theme', val);          if (val === 'dark') root.classList.add('dark'); else root.classList.remove('dark');          try { localStorage.setItem('theme', val); } catch {}        };      } catch {}    })();  </script></head><body class="bg-gradient-warm text-black min-h-screen relative {% if is_token_link %}token-view{% endif %}">{# --- Sticky "Edit Mode" banner: show only while impersonating --- #}{% if request.cookies.get('imp') %}  {% set safe_next = '/admin_dashboard' if request.url.path.startswith('/response/') else request.url.path %}  <div id="editModeBanner" class="sticky top-0 z-[120]">    <div class="flex items-center justify-between px-4 py-2 border-b bg-amber-50/95 backdrop-blur-sm border-amber-300">      <div class="flex items-center gap-2 text-amber-900">        <span class="material-symbols-outlined text-base">admin_panel_settings</span>        <span class="font-semibold">Edit Mode</span>        <span class="text-xs opacity-80">You’re editing as another user.</span>      </div>      <a href="/admin/impersonate/stop?next={{ safe_next | urlencode }}"         class="inline-flex items-center gap-1 px-3 py-1 rounded-lg border border-amber-400 bg-white hover:bg-amber-100 text-amber-900 text-sm font-medium shadow-sm transition">        <span class="material-symbols-outlined text-base">logout</span>        End Edit Mode      </a>    </div>  </div>{% endif %}<!-- Top Navbar --><header class="fixed top-0 left-0 w-full border-b border-black/70 bg-white/10 backdrop-blur-md z-50">  <nav class="h-14 grid grid-cols-[auto,1fr,auto] sm:grid-cols-3 items-center px-4 gap-2">    <!-- Left: Home + Brand -->    <div class="flex items-center gap-3">      <a><img src="{{ url_for('static', path='memories.png') }}" alt="Memories Logo" class="h-8 w-auto"></a>      <a href="/user_dashboard" class="nav-title font-kenia text-lg sm:text-2xl select-none">MEMORIES</a>    </div>    <!-- Center: Search -->    <div class="flex justify-end sm:justify-center">      <form id="nav-search-form" action="/user_dashboard" method="get" class="w-full max-w-xs sm:max-w-2xl">        <label class="sr-only" for="nav-search">Search</label>        <div class="flex items-center gap-2 rounded-full border border-black/70 bg-white/10 backdrop-blur-md px-3 py-1 shadow-[0_6px_20px_rgba(0,0,0,0.12)] focus-within:ring-2 focus-within:ring-black">          <span class="material-symbols-outlined select-none">search</span>          <input id="nav-search" name="q" type="search" autocomplete="off"                 placeholder="Search your memories…" class="w-full bg-transparent outline-none placeholder-black/60 text-sm sm:text-base" />        </div>      </form>    </div>    <!-- Right: avatar/login -->    <div class="flex justify-end items-center relative group">      {% if user %}        {% set avatar = None %}        {% if user and user.__dict__.get('profile_avatar_url') %}          {% set avatar = user.__dict__.get('profile_avatar_url') %}        {% endif %}        <div class="avatar-circle flex items-center justify-center cursor-pointer select-none" aria-haspopup="menu" aria-expanded="false" style="overflow:hidden;">          {% if avatar %}            <img src="{{ avatar }}" alt="Avatar" style="width:100%;height:100%;object-fit:cover;">          {% else %}            {{ (user.username or user.email)[0] | upper }}          {% endif %}        </div>        <div id="userMenu" class="absolute right-0 mt-12 w-48 rounded-2xl border border-black/70 bg-white/10 backdrop-blur-md shadow-[0_8px_30px_rgba(0,0,0,0.12)] opacity-0 pointer-events-none translate-y-1 transition-all duration-150 group-hover:opacity-100 group-hover:pointer-events-auto group-hover:translate-y-0">          <button type="button" onclick="logout()" class="w-full text-left flex items-center gap-2 px-4 py-2 rounded-2xl hover:bg-white/30">            <span class="material-symbols-outlined text-[20px]">logout</span>            <span>Logout</span>          </button>          <a href="/settings" class="flex items-center gap-2 px-4 py-2 rounded-2xl hover:bg-white/30">            <span class="material-symbols-outlined text-[20px]">settings</span>            <span>Settings</span>          </a>        </div>      {% else %}        <a href="/login" class="nav-link flex items-center gap-2">          <span class="material-symbols-outlined">login</span> Login        </a>      {% endif %}    </div>  </nav></header><!-- Page Content --><main class="relative z-20 pt-28 px-4 max-w-5xl mx-auto">  {% include 'notification.html' %}  {% block content %}{% endblock %}</main><!-- Dust motes container --><div id="motes" style="position:fixed; inset:0; z-index:15; pointer-events:none;"></div><script>(() => {  // --- knobs ---  const COUNT_LARGE = 55;    // more = denser  const COUNT_SMALL = 85;  const RESPECT_REDUCED_MOTION = true;  // 10 size tiers: bigger = faster  const TIERS = [    { r: 4,  speed:  1 },    { r: 5,  speed: 3 },    { r: 6,  speed: 5 },    { r: 7,  speed: 6 },    { r: 8,  speed: 7 },    { r: 9,  speed: 9 },    { r: 10, speed: 10 },    { r: 11, speed: 11 },    { r: 12, speed: 12 },    { r: 14, speed: 14 },  ];  const el = document.getElementById('motes');  if (!el) return;  const reduce = matchMedia('(prefers-reduced-motion: reduce)').matches;  if (RESPECT_REDUCED_MOTION && reduce) return;  let W = innerWidth, H = innerHeight, motes = [], raf, last = 0;  function rand(a,b){ return Math.random()*(b-a)+a; }  function rint(a,b){ return Math.floor(rand(a,b+1)); }  function makeDiv(r, opacity, oval) {    const d = document.createElement('div');    // soft dust gradient inline so nothing overrides it    d.style.width = d.style.height = r*2 + 'px';    d.style.position = 'absolute';    d.style.left = '0'; d.style.top = '0';    d.style.opacity = opacity.toFixed(2);    d.style.background = 'radial-gradient(circle at 50% 50%, rgba(247,247,247,0.95) 0 36%, rgba(225,225,225,0.55) 60%, rgba(247,247,247,0) 76%)';    d.style.willChange = 'transform, opacity';    d.dataset.oval = oval.toFixed(3);    // optional twinkle transition    d.style.transition = 'opacity .45s ease-in-out';    el.appendChild(d);    return d;  }  function newMote(initial=false) {    const idx = Math.min(9, Math.floor(Math.pow(Math.random(), 1.2) * 10));    const tier = TIERS[idx];    const r = tier.r;    const speed = tier.speed;    const baseX = rand(0, W);    const y = initial        ? rand(-H, H)        // anywhere in or just above/below view        : rand(H + 60, H + 260); // standard: start below    const amp = r * rand(0.8, 1.8);    const omega = rand(0.6, 1.2) / r;    const phase = rand(0, Math.PI*2);    const oval = rand(0.9, 1.15);    const opacity = rand(0.34, 0.52);    const div = makeDiv(r, opacity, oval);    return { div, r, speed, baseX, y, amp, omega, phase, oval, opacity };  }  function seed() {    W = innerWidth; H = innerHeight;    el.innerHTML = '';    motes = [];    const total = (W > 1400 ? COUNT_LARGE : Math.floor(COUNT_LARGE*0.8))                + (W > 1400 ? COUNT_SMALL : Math.floor(COUNT_SMALL*0.8));    for (let i=0;i<total;i++) motes.push(newMote(true)); // pass true for initial spread  }  function recycle(i) {    const m = motes[i];    const idx = Math.min(9, Math.floor(Math.pow(Math.random(), 1.2) * 10));    const tier = TIERS[idx];    m.r = tier.r;    m.speed = tier.speed;    m.baseX = rand(0, W);    m.y = H + Math.floor(rand(60, 260));    m.amp = Math.pow(Math.random(), 0.5) * 60; // 0–60px, skewed high    m.omega = rand(0.6, 1.2) / m.r;    m.phase = rand(0, Math.PI*2);    m.oval = rand(0.9, 1.15);    m.opacity = rand(0.34, 0.52);    m.div.style.width = m.div.style.height = m.r*2 + 'px';    m.div.style.opacity = m.opacity.toFixed(2);    m.div.dataset.oval = m.oval.toFixed(3);  }  function loop(ts) {    if (!last) last = ts;    const dt = Math.min(0.05, (ts - last)/1000);    last = ts;    for (let i=0;i<motes.length;i++) {      const m = motes[i];      m.y -= m.speed * dt;          // rise      if (m.y < -120) { recycle(i); continue; }      m.div.style.transform =        `translate3d(${(m.baseX + Math.sin(ts/1000*m.omega + m.phase) * m.amp - m.r)}px, ${(m.y - m.r)}px, 0) scale(1, ${m.oval})`;    }    raf = requestAnimationFrame(loop);  }  addEventListener('resize', () => seed(), { passive:true });  // boot  seed();  (function twinkle(){    const n = Math.floor(Math.random()*3)+1;    for (let k=0;k<n;k++) {      const m = motes[Math.floor(Math.random()*motes.length)];      if (!m || m._twinkling) continue;      m._twinkling = true;      const base = m.opacity;      m.div.style.opacity = (base * 0.7).toFixed(2);      setTimeout(() => { m.div.style.opacity = base.toFixed(2); m._twinkling = false; }, 450 + Math.floor(Math.random()*250));    }    setTimeout(twinkle, Math.floor(Math.random()*1200)+400);  })();  raf = requestAnimationFrame(loop);})();</script><script>  // Navbar search helpers: '/' to focus, Esc to clear  (function(){    const input = document.getElementById('nav-search');    document.addEventListener('keydown', (e)=>{      if (e.key==='/' && !(e.metaKey||e.ctrlKey||e.altKey)){        if (document.activeElement !== input){ e.preventDefault(); input?.focus(); }      }    });    input?.addEventListener('keydown', (e)=>{      if (e.key==='Escape'){ input.value=''; input.blur(); }    });  })();</script><script>function toggleUserMenu() {  const menu = document.getElementById('userMenu');  menu.classList.toggle('hidden');}</script><script>async function logout() {  try {    const res = await fetch('/auth/jwt/logout', {      method: 'POST',      credentials: 'include'    });    if (res.ok) {      window.location.href = '/login';    } else {      window.location.href = '/login';    }  } catch (e) {    window.location.href = '/login';  }}</script><!-- Media Modal (image / video / audio) --><div id="media-modal" class="fixed inset-0 bg-black/70 hidden items-center justify-center z-[200]" role="dialog" aria-modal="true" aria-label="Media viewer">  <div id="media-modal-frame" class="relative max-h-[86vh] max-w-[92vw]">    <button id="modalCloseBtn" class="absolute -top-3 -right-3 material-symbols-outlined text-gray-300 hover:text-white text-4xl p-2" aria-label="Close">close</button>    <div id="media-modal-content" class="max-h-[86vh] max-w-[92vw]"></div>  </div></div><script>  document.getElementById('printBtn')?.addEventListener('click', () => window.print());  // delegate clicks from thumb buttons  document.addEventListener('click', function(e){    const btn = e.target.closest('.thumb, .thumb-sm');    if(!btn) return;    const kind = btn.getAttribute('data-kind');    const src = btn.getAttribute('data-src');    if(kind && src) openMedia(kind, src);  });function openMedia(kind, src){  const modal=document.getElementById('media-modal');  const content=document.getElementById('media-modal-content');  content.innerHTML='';  // detect boomerang by filename  const isBoomerang = typeof src === 'string' && src.includes('playback_boomerang.mp4');  if(kind==='image'){    const img=document.createElement('img');    img.src=src; img.alt='';    img.className='block max-h-[86vh] max-w-[92vw] rounded-2xl outline outline-2 outline-white shadow-2xl';    content.appendChild(img);  }else if(kind==='video'){    const v=document.createElement('video');    v.controls=true;    v.autoplay=true;    if (isBoomerang) { v.loop = true; }       // ← only boomerangs loop    v.className='block max-h-[86vh] max-w-[92vw] rounded-2xl';    const s=document.createElement('source'); s.src=src; v.appendChild(s);    // mark for Plyr to loop as well (if you upgrade to Plyr here later)    if (isBoomerang) v.dataset.boomerang = '1';    content.appendChild(v);  }else if(kind==='audio'){    const a=document.createElement('audio'); a.controls=true; a.autoplay=true; a.className='block w-full'; a.src=src; content.appendChild(a);  }  modal.classList.remove('hidden'); modal.classList.add('flex');}  function closeMediaModal(){    const m=document.getElementById('media-modal');    const c=document.getElementById('media-modal-content');    c.innerHTML='';    m.classList.add('hidden');    m.classList.remove('flex');    m.setAttribute('aria-hidden','true');  }    document.addEventListener('keydown',e=>{ if(e.key==='Escape') closeMediaModal(); });  document.getElementById('media-modal')?.addEventListener('click',e=>{ if(e.target.id==='media-modal') closeMediaModal(); });  document.getElementById('modalCloseBtn')?.addEventListener('click', closeMediaModal);</script><script src="https://cdn.plyr.io/3.7.8/plyr.polyfilled.js"></script><script>  window.__initPlyr = (root = document) => {    const nodes = root.querySelectorAll('video[controls]:not([data-plyr-inited]), audio[controls]:not([data-plyr-inited])');    nodes.forEach(el => {      try {        const player = new Plyr(el, {          ratio: '16:9',          controls: [            'play-large','play','progress','current-time','duration',            'mute','volume','captions','pip','airplay','fullscreen' // ← removed "settings"          ],          clickToPlay: true,          autopause: false          // NOTE: no global loop here        });        // Only boomerangs loop forever        if (el.dataset.boomerang === '1') {          player.loop = { active: true };          el.setAttribute('loop', '');        }        el.setAttribute('data-plyr-inited', '1');      } catch (e) {}    });  };  document.addEventListener('DOMContentLoaded', () => window.__initPlyr());  // Re-init on dynamic inserts  const mo = new MutationObserver(muts => {    for (const m of muts) {      m.addedNodes && m.addedNodes.forEach(n => {        if (n.nodeType === 1) {          const hasMedia = n.matches?.('video[controls],audio[controls]') ||                           n.querySelector?.('video[controls],audio[controls]');          if (hasMedia) window.__initPlyr(n);        }      });    }  });  mo.observe(document.documentElement, { childList: true, subtree: true });</script><!-- === Global Nav/Save Veil (reused across pages) === --><style>  #navVeil{ position:fixed; inset:0; z-index:9998; display:none;    background:rgba(0,0,0,.78); backdrop-filter:blur(2px); color:#fff; }  #navVeil.show{ display:grid; place-items:center; }  #navVeil .veil-card{    width:min(440px,92vw); background:rgba(20,20,20,.96);    border:1px solid rgba(255,255,255,.16); border-radius:14px;    padding:18px 16px; text-align:center; box-shadow:0 22px 60px rgba(0,0,0,.55);  }  #navVeil .spin{    width:48px; height:48px; border:4px solid rgba(255,255,255,.22); border-top-color:#fff;    border-radius:50%; animation:spin 1s linear infinite; margin:0 auto 10px;  }  @keyframes spin { to { transform:rotate(360deg); } }</style><div id="navVeil" aria-live="polite" aria-hidden="true">  <div class="veil-card">    <div class="spin" aria-hidden="true"></div>    <div id="navVeilTitle" class="text-base font-semibold mb-1">Working…</div>    <div class="text-sm opacity-85">Please keep this tab open.</div>  </div></div><script>  (function(){    if (window.NavVeil) return;    const el = document.getElementById('navVeil');    const title = document.getElementById('navVeilTitle');    window.NavVeil = {      show(msg){        if (title) title.textContent = msg || 'Working…';        el?.classList.add('show');        el?.setAttribute('aria-hidden','false');        // allow a frame so veil paints before heavy work        return new Promise(r => requestAnimationFrame(() => setTimeout(r, 50)));      },      hide(){        el?.classList.remove('show');        el?.setAttribute('aria-hidden','true');      }    };  })();</script></body></html>